[{"D:\\apoll_0113\\src\\index.js":"1","D:\\apoll_0113\\src\\components\\App.js":"2","D:\\apoll_0113\\src\\routes\\Detail.js":"3","D:\\apoll_0113\\src\\routes\\Home.js":"4","D:\\apoll_0113\\src\\apollo.js":"5","D:\\apoll_0113\\src\\components\\Movie.js":"6"},{"size":516,"mtime":1610513576086,"results":"7","hashOfConfig":"8"},{"size":343,"mtime":1610513505082,"results":"9","hashOfConfig":"8"},{"size":1976,"mtime":1610513388197,"results":"10","hashOfConfig":"8"},{"size":1792,"mtime":1610513506767,"results":"11","hashOfConfig":"8"},{"size":537,"mtime":1610513388915,"results":"12","hashOfConfig":"8"},{"size":1160,"mtime":1610513457815,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ofdl1g",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"D:\\apoll_0113\\src\\index.js",[],["30","31"],"D:\\apoll_0113\\src\\components\\App.js",[],"D:\\apoll_0113\\src\\routes\\Detail.js",["32"],"import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport styled from \"styled-components\";\r\n\r\nconst GET_MOVIE = gql`\r\n  query getMovie($id: Int!) {\r\n    movie(id: $id) {\r\n      id\r\n      title\r\n      medium_cover_image\r\n      language\r\n      rating\r\n      description_intro\r\n      isLiked @client\r\n    }\r\n    suggestions(id: $id) {\r\n      id\r\n      medium_cover_image\r\n    }\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  background-image: linear-gradient(-45deg, #d754ab, #fd723a);\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  color: white;\r\n`;\r\n\r\nconst Column = styled.div`\r\n  margin-left: 10px;\r\n  width: 50%;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 65px;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nconst Subtitle = styled.h4`\r\n  font-size: 35px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Description = styled.p`\r\n  font-size: 28px;\r\n`;\r\n\r\nconst Poster = styled.div`\r\n  width: 25%;\r\n  height: 60%;\r\n  background-color: transparent;\r\n  background-image: url(${props => props.bg});\r\n  background-size: cover;\r\n  background-position: center center;\r\n`;\r\n\r\nexport default () => {\r\n    const { id } = useParams();\r\n    const { loading, data } = useQuery(GET_MOVIE, {\r\n        variables: { id: parseInt(id) }\r\n    });\r\n    return (\r\n        <Container>\r\n            <Column>\r\n                <Title>\r\n                    {loading\r\n                        ? \"Loading...\"\r\n                        : `${data.movie.title} ${data.movie.isLiked ? \"ðŸ’–\" : \"ðŸ˜ž\"}`}\r\n                </Title>\r\n                <Subtitle>\r\n                    {data?.movie?.language} Â· {data?.movie?.rating}\r\n                </Subtitle>\r\n                <Description>{data?.movie?.description_intro}</Description>\r\n            </Column>\r\n            <Poster bg={data?.movie?.medium_cover_image}></Poster>\r\n        </Container>\r\n    );\r\n};","D:\\apoll_0113\\src\\routes\\Home.js",["33"],"import React from \"react\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport styled from \"styled-components\";\r\nimport Movie from \"../components/Movie\";\r\n\r\nconst GET_MOVIES = gql`\r\n  {\r\n    movies {\r\n      id\r\n      medium_cover_image\r\n      isLiked @client\r\n    }\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  background-image: linear-gradient(-45deg, #d754ab, #fd723a);\r\n  height: 45vh;\r\n  color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 60px;\r\n  font-weight: 600;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Subtitle = styled.h3`\r\n  font-size: 35px;\r\n`;\r\n\r\nconst Loading = styled.div`\r\n  font-size: 18px;\r\n  opacity: 0.5;\r\n  font-weight: 500;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst Movies = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  grid-gap: 25px;\r\n  width: 60%;\r\n  position: relative;\r\n  top: -50px;\r\n`;\r\n\r\nexport default () => {\r\n    const { loading, data } = useQuery(GET_MOVIES);\r\n    return (\r\n        <Container>\r\n            <Header>\r\n                <Title>Apollo 2020</Title>\r\n                <Subtitle>I love GraphQL</Subtitle>\r\n            </Header>\r\n            {loading && <Loading>Loading...</Loading>}\r\n            <Movies>\r\n                {data?.movies?.map(m => (\r\n                    <Movie\r\n                        key={m.id}\r\n                        id={m.id}\r\n                        isLiked={m.isLiked}\r\n                        bg={m.medium_cover_image}\r\n                    />\r\n                ))}\r\n            </Movies>\r\n        </Container>\r\n    );\r\n};","D:\\apoll_0113\\src\\apollo.js",[],"D:\\apoll_0113\\src\\components\\Movie.js",["34"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nconst LIKE_MOVIE = gql`\r\n  mutation toggleLikeMovie($id: Int!, $isLiked: Boolean!) {\r\n    toggleLikeMovie(id: $id, isLiked: $isLiked) @client\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  height: 400px;\r\n  border-radius: 7px;\r\n  width: 100%;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\r\n  background-color: transparent;\r\n`;\r\n\r\nconst Poster = styled.div`\r\n  background-image: url(${props => props.bg});\r\n  height: 100%;\r\n  width: 100%;\r\n  background-size: cover;\r\n  background-position: center center;\r\n  border-radius: 7px;\r\n`;\r\n\r\nexport default ({ id, bg, isLiked }) => {\r\n    const [toggleMovie] = useMutation(LIKE_MOVIE, {\r\n        variables: { id: parseInt(id), isLiked }\r\n    });\r\n    return (\r\n        <Container>\r\n            <Link to={`/${id}`}>\r\n                <Poster bg={bg} />\r\n            </Link>\r\n            <button onClick={toggleMovie}>{isLiked ? \"Unlike\" : \"Like\"}</button>\r\n        </Container>\r\n    );\r\n};",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":63,"column":1,"nodeType":"41","endLine":84,"endColumn":3},{"ruleId":"39","severity":1,"message":"40","line":61,"column":1,"nodeType":"41","endLine":82,"endColumn":3},{"ruleId":"39","severity":1,"message":"40","line":30,"column":1,"nodeType":"41","endLine":42,"endColumn":3},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]